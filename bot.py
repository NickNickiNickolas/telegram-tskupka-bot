import asyncio
import logging
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã
AGE_CONFIRM, CATEGORY, CONDITION, CITY, PHONE, PHOTO, SAVE = range(7)

# –ê–¥–º–∏–Ω ID
ADMIN_CHAT_ID = 7902485807  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1-AzI2bdf_eDc0Lz42FiiVv48wT4IbGwISZHbzIoRhj8").sheet1

# –ö–Ω–æ–ø–∫–∏
category_buttons = [
    [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã", callback_data="–¢–µ–ª–µ—Ñ–æ–Ω—ã")],
    [InlineKeyboardButton("üíª –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", callback_data="–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞")],
    [InlineKeyboardButton("üõ† –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")],
    [InlineKeyboardButton("üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏", callback_data="–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏")],
    [InlineKeyboardButton("üè∫ –ê–Ω—Ç–∏–∫–≤–∞—Ä–∏–∞—Ç", callback_data="–ê–Ω—Ç–∏–∫–≤–∞—Ä–∏–∞—Ç")],
    [InlineKeyboardButton("üîÅ –î—Ä—É–≥–æ–µ", callback_data="–î—Ä—É–≥–æ–µ")],
]
condition_buttons = [
    [InlineKeyboardButton("–ö–∞–∫ –Ω–æ–≤–æ–µ", callback_data="–ö–∞–∫ –Ω–æ–≤–æ–µ")],
    [InlineKeyboardButton("–° –∏–∑–Ω–æ—Å–æ–º", callback_data="–° –∏–∑–Ω–æ—Å–æ–º")],
    [InlineKeyboardButton("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–æ", callback_data="–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–æ")],
]

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç", callback_data="yes")],
        [InlineKeyboardButton("–ù–µ—Ç 18 –ª–µ—Ç", callback_data="no")],
    ])

    if update.message:
        await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18:", reply_markup=keyboard)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18:", reply_markup=keyboard)

    return AGE_CONFIRM


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def age_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "no":
        await query.edit_message_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ —Å 18+.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="add_more")]
            ])
        )
        return ConversationHandler.END

    await query.message.reply_text("üì¶ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(category_buttons))
    return CATEGORY


async def get_device(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "–î—Ä—É–≥–æ–µ":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:")
        return CATEGORY
    else:
        context.user_data["device"] = query.data
        await query.message.reply_text("üëá –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏", reply_markup=InlineKeyboardMarkup(condition_buttons))
        return CONDITION


async def save_custom_device(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["device"] = update.message.text
    await update.message.reply_text("üëá –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏", reply_markup=InlineKeyboardMarkup(condition_buttons))
    return CONDITION


async def get_condition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["condition"] = query.data
    await query.message.reply_text("üåÜ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    return CITY


async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_input = update.message.text.strip()

    if not phone_input.isdigit():
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return PHONE

    context.user_data["phone"] = phone_input

    await update.message.reply_text(
        "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å).",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–µ—Ç —Ñ–æ—Ç–æ", callback_data="skip_photo")]
        ])
    )
    return PHOTO


async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        context.user_data["photo"] = photo_file.file_id
    else:
        context.user_data["photo"] = None

    return await save_data(update.message, context)


async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["photo"] = None
    return await save_data(update.callback_query.message, context)


async def save_data(message_source, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    photo_id = context.user_data.get("photo")
    photo_info = "https://t.me/c/{}/{}".format(ADMIN_CHAT_ID, message_source.message_id) if photo_id else "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"

    row_data = [
        now,
        context.user_data.get("device"),
        context.user_data.get("condition"),
        context.user_data.get("city"),
        context.user_data.get("phone"),
        "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
        photo_info,
    ]
    sheet.append_row(row_data)
    row_number = len(sheet.get_all_values())

    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üìÖ –î–∞—Ç–∞: {now}\n"
        f"üì¶ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {context.user_data.get('device')}\n"
        f"üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data.get('condition')}\n"
        f"üèô –ì–æ—Ä–æ–¥: {context.user_data.get('city')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
    )

    status_buttons = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –í—ã–∫—É–ø –∑–∞–≤–µ—Ä—à—ë–Ω", callback_data=f"status_done_{row_number}"),
            InlineKeyboardButton("‚ùå –ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", callback_data=f"status_cancel_{row_number}"),
        ]
    ])

    if photo_id:
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=photo_id,
            caption=text,
            reply_markup=status_buttons,
        )
    else:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=text,
            reply_markup=status_buttons,
        )

    await message_source.reply_text(
        "üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")]
        ])
    )
    return ConversationHandler.END


async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if str(query.message.chat_id) != str(ADMIN_CHAT_ID):
        await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å.")
        return

    data = query.data.split("_")
    status = "–í—ã–∫—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω" if data[1] == "done" else "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ"
    row = int(data[2])
    sheet.update_cell(row, 6, status)
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {status}")


async def add_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


if __name__ == '__main__':
    import asyncio
    asyncio.run(application.run_polling())    
    application = ApplicationBuilder().token("8079851046:AAGnyFflGYanv1kMGylzYbgyqlOokSlAYSs").build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(add_more, pattern="^add_more$"),
        ],
        states={
            AGE_CONFIRM: [CallbackQueryHandler(age_confirm)],
            CATEGORY: [
                CallbackQueryHandler(get_device),
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_custom_device),
            ],
            CONDITION: [CallbackQueryHandler(get_condition)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PHOTO: [
                MessageHandler(filters.PHOTO, get_photo),
                CallbackQueryHandler(skip_photo, pattern="^skip_photo$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(update_status, pattern="^status_(done|cancel)_\\d+$"))
    if __name__ == "__main__":
    asyncio.run(application.run_polling())
